name: CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    container:
      image: python:3.12-slim
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
      - name: Run test suite
        run: pytest

  electron:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: |
          cd electron-app
          npm install
      - name: Type-check renderer and main processes
        run: |
          cd electron-app
          npm run lint

  windows-x64-package:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Setup code signing
        run: |
          [System.Convert]::FromBase64String("${{ secrets.WIN_CERT_PFX }}") | Set-Content -Path electron-app/cert.pfx -AsByteStream
          echo "WIN_CERT_PASSWORD=${{ secrets.WIN_CERT_PASSWORD }}" >> $env:GITHUB_ENV
        shell: pwsh
      - name: Install dependencies
        run: |
          cd electron-app
          npm install
      - name: Build and package
        run: |
          cd electron-app
          npm run package
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64-packages
          path: |
            electron-app/dist/*.exe
            electron-app/dist/*.zip

  windows-arm64-package:
    runs-on: windows-11-arm
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Setup code signing
        run: |
          [System.Convert]::FromBase64String("${{ secrets.WIN_CERT_PFX }}") | Set-Content -Path electron-app/cert.pfx -AsByteStream
          echo "WIN_CERT_PASSWORD=${{ secrets.WIN_CERT_PASSWORD }}" >> $env:GITHUB_ENV
        shell: pwsh
      - name: Install dependencies
        run: |
          cd electron-app
          npm install
      - name: Build and package
        run: |
          cd electron-app
          npm run package
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-arm64-packages
          path: |
            electron-app/dist/*.exe
            electron-app/dist/*.zip

  release:
    runs-on: ubuntu-latest
    needs: [windows-x64-package, windows-arm64-package]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download Windows x64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-x64-packages
          path: artifacts/windows-x64
      - name: Download Windows ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-arm64-packages
          path: artifacts/windows-arm64
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows-x64/*
            artifacts/windows-arm64/*
          generate_release_notes: true
